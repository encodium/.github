name: Helm Deployment
on:
  workflow_call:
    inputs:
      image_tag:
        description: "Tag of docker image to deploy"
        required: true
        type: string
      namespace:
        description: "Kubernetes namespace to deploy resources in"
        required: false
        default: api
        type: string
      values-file:
        description: "Additional values.yaml file to include in deployment"
        required: false
        type: string
      environment:
        description: "Target environment for deployment (stg|prod)"
        required: true
        type: string
      atomic:
        description: "If true, helm upgrade uses --atomic enabling auto-rollback upon failure"
        default: false
        required: false
        type: boolean
    secrets:
      kubeconfig:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.image_tag }}
      - name: Setup Helm
        uses: azure/setup-helm@v3
      - name: Setup Kubectl
        uses: Azure/setup-kubectl@v3
      - name: deploy
        run: |
          echo "${{ secrets.kubeconfig }}" >> kube.config
          export KUBECONFIG=./kube.config
          helm version
          kubectl version

          if [ ! -z "${{ inputs.values-file }}" ]; then
            ARG_VALUES_FILE="-f ${{ inputs.values-file }}"
          fi

          WAIT_ARG="--wait"
          if [[ "${{ inputs.atomic }}" == true ]]; then
            WAIT_ARG="--atomic"
          fi

          helm upgrade ${{ github.event.repository.name }} ./deployments --install ${WAIT_ARG} --set image.tag="${{ inputs.image_tag }}" -n ${{ inputs.namespace }} ${ARG_VALUES_FILE}
      - name: Update GitHub release
        if: inputs.environment == 'prod'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ inputs.image_tag }}
          name: Release ${{ inputs.image_tag }}
          prerelease: false
          allowUpdates: true
          omitBodyDuringUpdate: true
      - name: Dynamically set environment variable
        if: inputs.environment == 'prod'
        run: echo TIMESTAMP_NOW=$(date --iso-8601=seconds) >> $GITHUB_ENV
      - name: Notify Jellyfish of deployment
        if: inputs.environment == 'prod'
        run: |
          curl -i -X POST \
            -H 'Content-Type: application/json' \
            -H 'X-jf-api-token: ${{ secrets.JELLYFISH_API_TOKEN }}' \
            -d '{
              "reference_id": "${{ github.event.repository.name }}-${{ inputs.image_tag }}-${{ github.run_id }}",
              "name": "${{ github.event.repository.name }} deployment of ${{ inputs.image_tag }} to ${{ inputs.environment }} complete",
              "deployed_at": "${{ env.TIMESTAMP_NOW }}",
              "repo_name": "${{ github.repository }}",
              "commit_shas": ["${{ github.sha }}"]
            }' \
            https://webhooks.jellyfish.co/deployment
