name: PHP Laravel Build and Push Image

on:
  workflow_call:
    inputs:
      php_version:
        required: false
        type: string
        default: "8.2"
      php_extensions:
        description: "Don't forget to add the default list if needed"
        required: false
        type: string
        default: "bcmath intl gd"
      dockerfile_path:
        description: "Path to the application dockerfile you want to build"
        required: false
        type: string
        default: "./build/app/Dockerfile"
    secrets:
      packagist_username:
        required: true
      packagist_password:
        required: true

jobs:
  php-test:
    name: PHP Docker Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php_version }}
          tools: composer
          coverage: none
          extensions: ${{ inputs.php_extensions }}
        env:
          COMPOSER_AUTH_JSON: |
            {
              "http-basic": {
                "repo.packagist.com": {
                  "username": "${{ secrets.packagist_username }}",
                  "password": "${{ secrets.packagist_password }}"
                }
              }
            }
      - name: Setup problem matchers for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer install --no-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader
      - name: Create coverage directory
        run: mkdir -p ./coverage
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx
      - name: Docker Build for testing
        uses: docker/build-push-action@v4

        with:
          context: .
          push: false
          target: dev # TODO: configurable
          file: ${{ inputs.dockerfile_path }}
          platforms: linux/amd64
          # TODO: configurable
          tags: "webstore_app:test"
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - name: Docker compose pull
        run: docker compose --file docker-compose.test.yml --project-directory . pull
      - name: Docker compose up
        run: docker compose --file docker-compose.test.yml --project-directory . up --abort-on-container-exit --exit-code-from app_test
        env:
          RP_CREDENTIALS_SECRET: ${{ secrets.RP_CREDENTIALS_SECRET }}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: "phpunit-code-coverage-report"
          path: "coverage.xml"
      - name: Fix code coverage paths
        if: ${{ inputs.run_sonar }}
        run: sed -i 's@/usr/src/app@/github/workspace@g' coverage.xml
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.sonar_token }}
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache